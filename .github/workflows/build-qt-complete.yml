name: Build Qt for macOS ARM64

on:
  workflow_dispatch:
    inputs:
      qt_version:
        description: 'Qt version to build'
        required: true
        default: '6.9.2'
        type: string
      build_type:
        description: 'Build type'
        required: true
        default: 'release'
        type: choice
        options:
          - release
          - debug
          - debug-and-release

jobs:
  build-qt:
    runs-on: macos-14  # macOS ARM64 runner
    timeout-minutes: 480  # 8 hours timeout
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up environment variables
      run: |
        echo "QT_VERSION=${{ github.event.inputs.qt_version }}" >> $GITHUB_ENV
        echo "BUILD_TYPE=${{ github.event.inputs.build_type }}" >> $GITHUB_ENV
        echo "QT_INSTALL_DIR=$HOME/qt-install" >> $GITHUB_ENV
        echo "QT_SOURCE_DIR=$HOME/qt-source" >> $GITHUB_ENV
        echo "QT_BUILD_DIR=$HOME/qt-build" >> $GITHUB_ENV
    
    - name: Clean up and install dependencies
      run: |
        # Update Homebrew
        brew update
        
        # Check and install cmake if not present
        if ! command -v cmake &> /dev/null; then
          echo "cmake not found, installing..."
          brew install cmake
        else
          echo "cmake already installed: $(cmake --version | head -1)"
        fi
        
        # Install other required packages
        brew install ninja python@3.11 perl node pkg-config openssl
        
        # Ensure Xcode command line tools are installed
        xcode-select --install || echo "Command line tools already installed"
        
        # Set up paths
        echo "/opt/homebrew/bin" >> $GITHUB_PATH
        echo "/opt/homebrew/opt/python@3.11/bin" >> $GITHUB_PATH
        echo "/opt/homebrew/opt/openssl@3/bin" >> $GITHUB_PATH
        
        # Set up environment variables for OpenSSL
        echo "OPENSSL_ROOT_DIR=/opt/homebrew/opt/openssl@3" >> $GITHUB_ENV
        echo "PKG_CONFIG_PATH=/opt/homebrew/opt/openssl@3/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
        
        # Verify installations
        echo "=== Installed Versions ==="
        cmake --version
        ninja --version
        python3 --version
        perl --version
        node --version
        pkg-config --version
    
    - name: Download Qt source
      run: |
        mkdir -p $QT_SOURCE_DIR
        cd $QT_SOURCE_DIR
        
        # Extract major.minor version for URL
        QT_MAJOR_MINOR=$(echo $QT_VERSION | sed 's/\([0-9]*\.[0-9]*\).*/\1/')
        
        # Download Qt source from official repository
        echo "Downloading Qt $QT_VERSION source..."
        curl -L "https://download.qt.io/official_releases/qt/$QT_MAJOR_MINOR/$QT_VERSION/single/qt-everywhere-src-$QT_VERSION.tar.xz" -o qt-source.tar.xz
        
        # Verify download
        if [ ! -f qt-source.tar.xz ]; then
          echo "Failed to download Qt source"
          exit 1
        fi
        
        ls -la qt-source.tar.xz
        
        # Extract source
        echo "Extracting Qt source..."
        tar -xf qt-source.tar.xz --strip-components=1
        rm qt-source.tar.xz
        
        # Show extracted contents
        echo "=== Qt Source Directory Contents ==="
        ls -la | head -20
    
    - name: Configure Qt build
      run: |
        mkdir -p $QT_BUILD_DIR
        cd $QT_BUILD_DIR
        
        echo "=== Configuring Qt Build ==="
        echo "Qt Version: $QT_VERSION"
        echo "Build Type: $BUILD_TYPE"
        echo "Source Dir: $QT_SOURCE_DIR"
        echo "Build Dir: $QT_BUILD_DIR"
        echo "Install Dir: $QT_INSTALL_DIR"
        
        # Set up configure arguments based on build type
        case "$BUILD_TYPE" in
          "debug")
            CONFIG_TYPE="-debug"
            CMAKE_BUILD_TYPE="Debug"
            ;;
          "debug-and-release")
            CONFIG_TYPE="-debug-and-release"
            CMAKE_BUILD_TYPE="RelWithDebInfo"
            ;;
          *)
            CONFIG_TYPE="-release"
            CMAKE_BUILD_TYPE="Release"
            ;;
        esac
        
        # Configure Qt with optimized settings for ARM64 macOS
        $QT_SOURCE_DIR/configure \
          -prefix $QT_INSTALL_DIR \
          $CONFIG_TYPE \
          -shared \
          -opensource \
          -confirm-license \
          -nomake examples \
          -nomake tests \
          -no-feature-assistant \
          -no-feature-designer \
          -no-feature-linguist \
          -no-feature-pixeltool \
          -no-feature-qtattributionsscanner \
          -no-feature-qtdiag \
          -no-feature-qtplugininfo \
          -qt-zlib \
          -qt-libpng \
          -qt-libjpeg \
          -qt-freetype \
          -qt-harfbuzz \
          -qt-pcre \
          -openssl-linked \
          -I /opt/homebrew/opt/openssl@3/include \
          -L /opt/homebrew/opt/openssl@3/lib \
          -system-proxies \
          -feature-relocatable \
          -- \
          -DCMAKE_OSX_ARCHITECTURES=arm64 \
          -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE \
          -DCMAKE_INSTALL_PREFIX=$QT_INSTALL_DIR \
          -DOPENSSL_ROOT_DIR=/opt/homebrew/opt/openssl@3
    
    - name: Build Qt
      run: |
        cd $QT_BUILD_DIR
        
        # Get number of CPU cores for parallel build
        CORES=$(sysctl -n hw.ncpu)
        echo "Building Qt with $CORES parallel jobs..."
        echo "This may take 2-4 hours depending on the configuration..."
        
        # Build Qt using CMake
        cmake --build . --parallel $CORES
    
    - name: Install Qt
      run: |
        cd $QT_BUILD_DIR
        echo "Installing Qt to $QT_INSTALL_DIR..."
        cmake --install .
    
    - name: Verify installation
      run: |
        echo "=== Qt Installation Directory ==="
        ls -la $QT_INSTALL_DIR
        
        echo "=== Qt Version Check ==="
        $QT_INSTALL_DIR/bin/qmake -version
        
        echo "=== Binary Architecture Check ==="
        file $QT_INSTALL_DIR/bin/qmake
        lipo -info $QT_INSTALL_DIR/bin/qmake
        
        echo "=== Library Check ==="
        ls -la $QT_INSTALL_DIR/lib/ | head -10
        
        echo "=== Include Headers Check ==="
        ls -la $QT_INSTALL_DIR/include/ | head -10
        
        echo "=== Qt Modules Check ==="
        find $QT_INSTALL_DIR/lib -name "*.framework" | head -10
    
    - name: Create distribution package
      run: |
        cd $HOME
        
        # Create package directory
        PACKAGE_NAME="qt-$QT_VERSION-macos-arm64-$BUILD_TYPE"
        echo "Creating package: $PACKAGE_NAME"
        mkdir -p $PACKAGE_NAME
        
        # Copy Qt installation
        echo "Copying Qt installation..."
        cp -R $QT_INSTALL_DIR/* $PACKAGE_NAME/
        
        # Get build date properly
        BUILD_DATE=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
        XCODE_VERSION=$(xcodebuild -version 2>/dev/null | head -1 || echo "N/A")
        
        # Create comprehensive build and usage info
        cat > $PACKAGE_NAME/BUILD_INFO.txt << EOF
Qt Version: $QT_VERSION
Platform: macOS ARM64 (Apple Silicon)
Build Type: $BUILD_TYPE
Build Date: $BUILD_DATE
Build Host: $(uname -a)
Xcode Version: $XCODE_VERSION
CMake Version: $(cmake --version | head -1)
Ninja Version: $(ninja --version)

=== Installation Instructions ===
1. Extract this archive to your desired location:
   tar -xzf qt-$QT_VERSION-macos-arm64-$BUILD_TYPE.tar.gz

2. Set environment variables:
   export QTDIR="/path/to/extracted/qt"
   export PATH="\$QTDIR/bin:\$PATH"
   export CMAKE_PREFIX_PATH="\$QTDIR:\$CMAKE_PREFIX_PATH"

3. For permanent setup, add to your shell profile (~/.zshrc or ~/.bash_profile):
   echo 'export QTDIR="/path/to/qt"' >> ~/.zshrc
   echo 'export PATH="\$QTDIR/bin:\$PATH"' >> ~/.zshrc
   echo 'export CMAKE_PREFIX_PATH="\$QTDIR:\$CMAKE_PREFIX_PATH"' >> ~/.zshrc

=== Verification ===
qmake -version
# Should show: Qt version $QT_VERSION

file \$QTDIR/bin/qmake
# Should show: Mach-O 64-bit executable arm64

=== Usage Examples ===

## With qmake:
qmake -project
qmake
make

## With CMake:
Create CMakeLists.txt:
---
cmake_minimum_required(VERSION 3.16)
project(MyApp)

find_package(Qt6 REQUIRED COMPONENTS Core Widgets)
qt_standard_project_setup()

qt_add_executable(MyApp main.cpp)
target_link_libraries(MyApp Qt6::Widgets)
---

Build:
mkdir build && cd build
cmake ..
cmake --build .

=== Package Contents ===
- bin/          : Qt tools (qmake, moc, uic, etc.)
- lib/          : Qt libraries and frameworks
- include/      : Qt headers
- plugins/      : Qt plugins
- qml/          : QML modules
- doc/          : Documentation (if included)
- mkspecs/      : qmake specifications

=== Troubleshooting ===
- If you get "library not loaded" errors, ensure QTDIR is set correctly
- For code signing issues, you may need to re-sign the binaries
- Check that CMAKE_PREFIX_PATH includes your Qt installation path
EOF
        
        # Create compressed archive
        echo "Creating compressed archive..."
        tar -czf $PACKAGE_NAME.tar.gz $PACKAGE_NAME/
        
        # Generate checksums
        shasum -a 256 $PACKAGE_NAME.tar.gz > $PACKAGE_NAME.tar.gz.sha256
        
        # Show package info
        echo "=== Package Information ==="
        ls -lh $PACKAGE_NAME.tar.gz
        echo "SHA256:"
        cat $PACKAGE_NAME.tar.gz.sha256
        
        # Show package contents summary
        echo "=== Package Contents Summary ==="
        tar -tzf $PACKAGE_NAME.tar.gz | head -30
        echo "... (and more files)"
        
        # Get total file count
        TOTAL_FILES=$(tar -tzf $PACKAGE_NAME.tar.gz | wc -l)
        echo "Total files in package: $TOTAL_FILES"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: qt-${{ env.QT_VERSION }}-macos-arm64-${{ env.BUILD_TYPE }}
        path: |
          ~/qt-${{ env.QT_VERSION }}-macos-arm64-${{ env.BUILD_TYPE }}.tar.gz
          ~/qt-${{ env.QT_VERSION }}-macos-arm64-${{ env.BUILD_TYPE }}.tar.gz.sha256
        retention-days: 30
        compression-level: 0  # Already compressed
    
    - name: Create Release (if tagged)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: |
          ~/qt-${{ env.QT_VERSION }}-macos-arm64-${{ env.BUILD_TYPE }}.tar.gz
          ~/qt-${{ env.QT_VERSION }}-macos-arm64-${{ env.BUILD_TYPE }}.tar.gz.sha256
        name: Qt ${{ env.QT_VERSION }} for macOS ARM64 (${{ env.BUILD_TYPE }})
        body: |
          # Qt ${{ env.QT_VERSION }} for macOS ARM64
          
          **Build Configuration:** ${{ env.BUILD_TYPE }}  
          **Architecture:** ARM64 (Apple Silicon)  
          **Platform:** macOS 14+  
          **Built on:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ## 🚀 Quick Start
          
          ```bash
          # Download and extract
          curl -L -O https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/qt-${{ env.QT_VERSION }}-macos-arm64-${{ env.BUILD_TYPE }}.tar.gz
          tar -xzf qt-${{ env.QT_VERSION }}-macos-arm64-${{ env.BUILD_TYPE }}.tar.gz
          
          # Set up environment
          export QTDIR="$(pwd)/qt-${{ env.QT_VERSION }}-macos-arm64-${{ env.BUILD_TYPE }}"
          export PATH="$QTDIR/bin:$PATH"
          export CMAKE_PREFIX_PATH="$QTDIR:$CMAKE_PREFIX_PATH"
          
          # Verify installation
          qmake -version
          ```
          
          ## 📋 Installation
          
          1. **Download** the tar.gz file
          2. **Extract** to your preferred location
          3. **Set environment variables** (see BUILD_INFO.txt for details)
          4. **Verify** with `qmake -version`
          
          ## 🔧 Usage
          
          ### With CMake (Recommended)
          ```cmake
          find_package(Qt6 REQUIRED COMPONENTS Core Widgets)
          qt_standard_project_setup()
          qt_add_executable(myapp main.cpp)
          target_link_libraries(myapp Qt6::Widgets)
          ```
          
          ### With qmake
          ```bash
          qmake -project
          qmake
          make
          ```
          
          ## ✅ Verification
          
          ```bash
          # Check Qt version
          qmake -version
          
          # Verify ARM64 architecture
          file $QTDIR/bin/qmake
          # Should show: Mach-O 64-bit executable arm64
          ```
          
          ## 🔐 Security
          
          **SHA256 Checksum:**
          ```bash
          shasum -a 256 -c qt-${{ env.QT_VERSION }}-macos-arm64-${{ env.BUILD_TYPE }}.tar.gz.sha256
          ```
          
          ## 📖 Documentation
          
          - See `BUILD_INFO.txt` in the package for detailed setup instructions
          - Visit [Qt Documentation](https://doc.qt.io/) for API reference
          - Check [Qt Examples](https://doc.qt.io/qt-6/qtexamples.html) for sample code
          
          ---
          
          **Note:** This is a source-built Qt installation optimized for macOS ARM64. All binaries are built specifically for Apple Silicon Macs.
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}