name: Build Qt 6.8.1 macOS ARM64

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'Release'
        type: choice
        options:
        - Release
        - Debug

env:
  QT_VERSION: "6.8.1"

jobs:
  build-qt:
    runs-on: macos-14
    timeout-minutes: 360
    
    steps:
    - name: Install dependencies
      run: |
        brew install ninja cmake openssl@3 icu4c
        echo "PATH=/opt/homebrew/bin:$PATH" >> $GITHUB_ENV
        echo "PKG_CONFIG_PATH=/opt/homebrew/lib/pkgconfig" >> $GITHUB_ENV
    
    - name: Cache Qt source
      uses: actions/cache@v4
      id: cache-source
      with:
        path: qt-src
        key: qt-source-${{ env.QT_VERSION }}
    
    - name: Download Qt source
      if: steps.cache-source.outputs.cache-hit != 'true'
      run: |
        curl -L -o qt.tar.xz https://download.qt.io/official_releases/qt/6.8/${{ env.QT_VERSION }}/single/qt-everywhere-src-${{ env.QT_VERSION }}.tar.xz
        tar -xf qt.tar.xz
        mv qt-everywhere-src-${{ env.QT_VERSION }} qt-src
    
    - name: Cache Qt build
      uses: actions/cache@v4
      id: cache-build
      with:
        path: qt-install
        key: qt-build-${{ env.QT_VERSION }}-${{ inputs.build_type }}-${{ hashFiles('qt-src/configure.cmake') }}
    
    - name: Build Qt
      if: steps.cache-build.outputs.cache-hit != 'true'
      run: |
        mkdir -p qt-build qt-install
        cd qt-build
        
        cmake ../qt-src \
          -GNinja \
          -DCMAKE_INSTALL_PREFIX=../qt-install \
          -DCMAKE_BUILD_TYPE=${{ inputs.build_type }} \
          -DCMAKE_OSX_ARCHITECTURES=arm64 \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=12.0 \
          -DCMAKE_PREFIX_PATH=/opt/homebrew \
          -DQT_BUILD_EXAMPLES=OFF \
          -DQT_BUILD_TESTS=OFF \
          -DQT_FEATURE_webengine=OFF \
          -DQT_FEATURE_webenginecore=OFF \
          -DQT_FEATURE_webenginewidgets=OFF \
          -DOpenSSL_ROOT_DIR=/opt/homebrew/opt/openssl@3 \
          -DICU_ROOT_DIR=/opt/homebrew/opt/icu4c
        
        ninja -j$(sysctl -n hw.ncpu)
        ninja install
    
    - name: Create package
      run: |
        cd qt-install
        
        # Create simple setup script
        cat > setup.sh << 'EOF'
        #!/bin/bash
        export QT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
        export PATH="$QT_DIR/bin:$PATH"
        export CMAKE_PREFIX_PATH="$QT_DIR"
        EOF
        chmod +x setup.sh
        
        # Strip debug symbols for release builds
        if [[ "${{ inputs.build_type }}" == "Release" ]]; then
          find ./lib -name "*.dylib" -exec strip -x {} \; 2>/dev/null || true
        fi
        
        cd ..
        tar -czf qt-${{ env.QT_VERSION }}-macos-arm64.tar.gz -C qt-install .
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: qt-${{ env.QT_VERSION }}-macos-arm64-${{ inputs.build_type }}
        path: qt-${{ env.QT_VERSION }}-macos-arm64.tar.gz
        retention-days: 30