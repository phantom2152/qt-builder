name: Build Qt macOS arm64

on:
  workflow_dispatch:
    inputs:
      qt_version:
        description: 'Qt version source archive to build (e.g. 6.9.2)'
        required: true
        default: '6.9.2'
      submodules:
        description: 'Comma-separated submodules to build (e.g. qtbase,qtdeclarative,qtsvg). Leave empty for full "qt-everywhere" source.'
        required: false
        default: ''
      configure_extra:
        description: 'Extra configure args (space-separated, optional)'
        required: false
        default: ''

jobs:
  build:
    runs-on: macos-14  # Apple Silicon (arm64)
    timeout-minutes: 600

    env:
      # Installation prefix inside the runner workspace
      INSTALL_PREFIX: ${{ github.workspace }}/qt-install
      BUILD_DIR: ${{ github.workspace }}/qt-build
      SRC_DIR: ${{ github.workspace }}/qt-src
      ARCH: arm64

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Show runner info
        run: |
          sw_vers
          uname -a
          sysctl -n machdep.cpu.brand_string || true
          xcodebuild -version

      - name: Install tools via Homebrew
        run: |
          brew update
          brew install ninja coreutils gnu-tar || true
          # Optional: dependencies commonly needed by some Qt modules
          brew install pkg-config openssl@3 bison flex gperf node python@3.12 || true
          echo "HOMEBREW_PREFIX=$(brew --prefix)" >> $GITHUB_ENV
          echo "OPENSSL_ROOT_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV

      - name: Prepare source
        run: |
          set -euxo pipefail
          mkdir -p "$SRC_DIR"
          version="${{ github.event.inputs.qt_version }}"
          # Download the "qt-everywhere" source tarball for the version
          # Example filename: qt-everywhere-src-6.9.2.tar.xz
          url="https://download.qt.io/official_releases/qt/${version%.*}/${version}/single/qt-everywhere-src-${version}.tar.xz"
          echo "Downloading: $url"
          curl -fL "$url" -o "$GITHUB_WORKSPACE/qt-src.tar.xz"
          mkdir -p "$SRC_DIR"
          tar -xJf "$GITHUB_WORKSPACE/qt-src.tar.xz" -C "$SRC_DIR" --strip-components=1
          ls -la "$SRC_DIR"

      - name: Configure Qt (CMake via ./configure)
        working-directory: ${{ env.SRC_DIR }}
        env:
          # Ensure arm64 build
          CMAKE_OSX_ARCHITECTURES: ${{ env.ARCH }}
        run: |
          set -euxo pipefail
          mkdir -p "$BUILD_DIR"
          # Flags to reduce size and skip things:
          # -nomake examples -nomake tests skips building examples/tests
          # -skip qtwebengine and other heavy modules are often skipped; adjust as needed
          # For docs: no special flag needed if qdoc/docs aren't built; -nomake examples/tests is sufficient.
          # Use -prefix to control install destination.
          base_flags=(
            -prefix "$INSTALL_PREFIX"
            -opensource
            -confirm-license
            -release
            -no-dbus
            -nomake examples
            -nomake tests
          )

          # Optionally limit submodules
          subs="${{ github.event.inputs.submodules }}"
          if [ -n "$subs" ]; then
            # Convert comma list to configure syntax: -submodules a,b,c
            base_flags+=(-submodules "$(echo "$subs" | tr -d ' ')")
          else
            # Skip some heavy/optional modules if building full tree. Adjust as needed.
            base_flags+=(
              -skip qtwebengine
              -skip qtpdf
              -skip qtwebview
              -skip qtserialbus
              -skip qtserialport
              -skip qtcharts
              -skip qtpositioning
              -skip qt3d
              -skip qtmultimedia
              -skip qtconnectivity
            )
          fi

          # Extra user-provided args
          extra="${{ github.event.inputs.configure_extra }}"
          if [ -n "$extra" ]; then
            # Split shell words
            read -r -a extra_arr <<< "$extra"
          else
            extra_arr=()
          fi

          # Forward additional CMake args after --
          cmake_inject_args=(
            -DCMAKE_BUILD_TYPE=Release
            -DCMAKE_OSX_ARCHITECTURES="${CMAKE_OSX_ARCHITECTURES}"
            -DOPENSSL_ROOT_DIR="${OPENSSL_ROOT_DIR:-}"
          )

          # Run configure (Qt 6 configure is a wrapper around CMake)
          ./configure \
            "${base_flags[@]}" \
            "${extra_arr[@]}" \
            -- \
            "${cmake_inject_args[@]}"

      - name: Build
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          set -euxo pipefail
          cmake --build . --parallel

      - name: Install
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          set -euxo pipefail
          cmake --install .

      - name: Create tarball
        run: |
          set -euxo pipefail
          version="${{ github.event.inputs.qt_version }}"
          out="qt-macos-arm64-${version}.tar.xz"
          # Use gtar if available for better reproducibility
          TAR_BIN="$(command -v gtar || command -v tar)"
          cd "$INSTALL_PREFIX/.."
          "$TAR_BIN" -cJf "$GITHUB_WORKSPACE/$out" "$(basename "$INSTALL_PREFIX")"
          echo "ASSET_PATH=$GITHUB_WORKSPACE/$out" >> $GITHUB_ENV
          echo "ASSET_NAME=$out" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "qt-macos-arm64-${{ github.event.inputs.qt_version }}"
          name: "Qt macOS arm64 ${{ github.event.inputs.qt_version }}"
          draft: false
          prerelease: false
          files: ${{ env.ASSET_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}